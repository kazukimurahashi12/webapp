// Code generated by MockGen. DO NOT EDIT.
// Source: ./server-app/usecase/blog/blog.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	blog "github.com/kazukimurahashi12/webapp/domain/blog"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// DeleteBlog mocks base method.
func (m *MockUseCase) DeleteBlog(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlog", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlog indicates an expected call of DeleteBlog.
func (mr *MockUseCaseMockRecorder) DeleteBlog(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlog", reflect.TypeOf((*MockUseCase)(nil).DeleteBlog), id)
}

// FindBlogByAuthorID mocks base method.
func (m *MockUseCase) FindBlogByAuthorID(authorID uint) (*blog.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBlogByAuthorID", authorID)
	ret0, _ := ret[0].(*blog.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBlogByAuthorID indicates an expected call of FindBlogByAuthorID.
func (mr *MockUseCaseMockRecorder) FindBlogByAuthorID(authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBlogByAuthorID", reflect.TypeOf((*MockUseCase)(nil).FindBlogByAuthorID), authorID)
}

// FindBlogByID mocks base method.
func (m *MockUseCase) FindBlogByID(id uint) (*blog.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBlogByID", id)
	ret0, _ := ret[0].(*blog.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBlogByID indicates an expected call of FindBlogByID.
func (mr *MockUseCaseMockRecorder) FindBlogByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBlogByID", reflect.TypeOf((*MockUseCase)(nil).FindBlogByID), id)
}

// FindBlogsByAuthorID mocks base method.
func (m *MockUseCase) FindBlogsByAuthorID(authorID uint) ([]blog.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBlogsByAuthorID", authorID)
	ret0, _ := ret[0].([]blog.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBlogsByAuthorID indicates an expected call of FindBlogsByAuthorID.
func (mr *MockUseCaseMockRecorder) FindBlogsByAuthorID(authorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBlogsByAuthorID", reflect.TypeOf((*MockUseCase)(nil).FindBlogsByAuthorID), authorID)
}

// NewCreateBlog mocks base method.
func (m *MockUseCase) NewCreateBlog(b *blog.Blog) (*blog.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCreateBlog", b)
	ret0, _ := ret[0].(*blog.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCreateBlog indicates an expected call of NewCreateBlog.
func (mr *MockUseCaseMockRecorder) NewCreateBlog(blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCreateBlog", reflect.TypeOf((*MockUseCase)(nil).NewCreateBlog), blog)
}

// UpdateBlog mocks base method.
func (m *MockUseCase) UpdateBlog(b *blog.Blog) (*blog.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlog", b)
	ret0, _ := ret[0].(*blog.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlog indicates an expected call of UpdateBlog.
func (mr *MockUseCaseMockRecorder) UpdateBlog(blog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlog", reflect.TypeOf((*MockUseCase)(nil).UpdateBlog), blog)
}
